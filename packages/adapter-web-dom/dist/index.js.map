{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export type Camera = { scale: number; x: number; y: number };\nexport type SemanticNode = {\n  id?: string;\n  type: string;\n  children?: SemanticNode[];\n  summary?: string;\n  renderHints?: any;\n  metadata?: any;\n};\n\nexport function renderToDom(\n  tree: any,\n  mountEl: HTMLElement,\n  camera: Camera = { scale: 1, x: 0, y: 0 }\n) {\n  mountEl.innerHTML = \"\";\n\n  const canvas = document.createElement(\"div\");\n  canvas.style.transformOrigin = \"0 0\";\n  canvas.style.transform = `translate(${camera.x}px, ${camera.y}px) scale(${camera.scale})`;\n  canvas.style.willChange = \"transform\";\n  canvas.style.position = \"absolute\";\n  canvas.style.width = \"100%\";\n  canvas.style.height = \"100%\";\n\n  // Render the semantic tree\n  if (tree && tree.children) {\n    renderNodes(tree.children, canvas, camera.scale);\n  }\n\n  mountEl.appendChild(canvas);\n}\n\nfunction renderNodes(\n  nodes: SemanticNode[],\n  container: HTMLElement,\n  scale: number\n) {\n  nodes.forEach((node, index) => {\n    const element = createNodeElement(node, scale, index);\n    container.appendChild(element);\n\n    // Recursively render children\n    if (node.children && node.children.length > 0) {\n      renderNodes(node.children, element, scale);\n    }\n  });\n}\n\nfunction createNodeElement(\n  node: SemanticNode,\n  scale: number,\n  index: number\n): HTMLElement {\n  const el = document.createElement(\"div\");\n  el.style.padding = \"20px\";\n  el.style.border = \"2px solid #ddd\";\n  el.style.borderRadius = \"8px\";\n  el.style.background = \"white\";\n  el.style.boxShadow = \"0 2px 8px rgba(0,0,0,0.1)\";\n  el.style.position = \"absolute\";\n  // Position nodes in a simple layout for now\n  el.style.left = `${100 + (index % 3) * 300}px`;\n  el.style.top = `${100 + Math.floor(index / 3) * 250}px`;\n  el.style.width = \"250px\";\n\n  // Add node info header\n  const header = document.createElement(\"div\");\n  header.style.marginBottom = \"10px\";\n  header.style.fontSize = \"14px\";\n  header.style.color = \"#666\";\n  header.innerHTML = `<strong>${node.type}</strong> ${\n    node.id ? `(${node.id})` : \"\"\n  }`;\n  el.appendChild(header);\n\n  // Render based on node type\n  switch (node.type) {\n    case \"ui.frame\":\n      el.style.background = \"#f5f5f5\";\n      el.style.minHeight = \"200px\";\n      break;\n\n    case \"ui.table\":\n      renderTable(el, node, scale);\n      break;\n\n    case \"ui.chart\":\n      renderChart(el, node, scale);\n      break;\n\n    case \"summary\":\n      renderSummary(el, node);\n      break;\n\n    default:\n      el.innerHTML += `<div style=\"color: #999;\">Unknown node type: ${node.type}</div>`;\n  }\n\n  return el;\n}\n\nfunction renderTable(\n  container: HTMLElement,\n  node: SemanticNode,\n  scale: number\n) {\n  const sampleRows = node.renderHints?.sampleRows || 10;\n\n  // Show fewer rows when zoomed out\n  const visibleRows = scale < 0.5 ? 3 : Math.min(sampleRows, 10);\n\n  const table = document.createElement(\"table\");\n  table.style.width = \"100%\";\n  table.style.borderCollapse = \"collapse\";\n  table.style.fontSize = scale < 0.5 ? \"10px\" : \"14px\";\n\n  // Header\n  const thead = document.createElement(\"thead\");\n  thead.innerHTML = \"<tr><th>ID</th><th>Name</th><th>Status</th></tr>\";\n  table.appendChild(thead);\n\n  // Body\n  const tbody = document.createElement(\"tbody\");\n  for (let i = 0; i < visibleRows; i++) {\n    const tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n      <td style=\"padding: 8px; border: 1px solid #ddd;\">${i + 1}</td>\n      <td style=\"padding: 8px; border: 1px solid #ddd;\">User ${i + 1}</td>\n      <td style=\"padding: 8px; border: 1px solid #ddd;\">Active</td>\n    `;\n    tbody.appendChild(tr);\n  }\n\n  if (sampleRows > visibleRows) {\n    const tr = document.createElement(\"tr\");\n    tr.innerHTML = `<td colspan=\"3\" style=\"padding: 8px; text-align: center; color: #999;\">... ${\n      sampleRows - visibleRows\n    } more rows</td>`;\n    tbody.appendChild(tr);\n  }\n\n  table.appendChild(tbody);\n  container.appendChild(table);\n}\n\nfunction renderChart(\n  container: HTMLElement,\n  node: SemanticNode,\n  scale: number\n) {\n  const chartContainer = document.createElement(\"div\");\n  chartContainer.style.width = \"100%\";\n  chartContainer.style.height = scale < 0.5 ? \"100px\" : \"200px\";\n  chartContainer.style.background = \"#f0f0f0\";\n  chartContainer.style.borderRadius = \"4px\";\n  chartContainer.style.display = \"flex\";\n  chartContainer.style.alignItems = \"flex-end\";\n  chartContainer.style.padding = \"10px\";\n  chartContainer.style.gap = \"4px\";\n\n  // Simple bar chart\n  const bars = scale < 0.5 ? 5 : 10;\n  for (let i = 0; i < bars; i++) {\n    const bar = document.createElement(\"div\");\n    bar.style.flex = \"1\";\n    bar.style.height = `${Math.random() * 80 + 20}%`;\n    bar.style.background = \"#4CAF50\";\n    bar.style.borderRadius = \"2px\";\n    chartContainer.appendChild(bar);\n  }\n\n  container.appendChild(chartContainer);\n}\n\nfunction renderSummary(container: HTMLElement, node: SemanticNode) {\n  const summary = document.createElement(\"div\");\n  summary.style.padding = \"10px\";\n  summary.style.background = \"#fffbf0\";\n  summary.style.border = \"1px solid #f0e0c0\";\n  summary.style.borderRadius = \"4px\";\n  summary.style.fontStyle = \"italic\";\n  summary.style.color = \"#666\";\n  summary.textContent = node.summary || \"Summary view\";\n  container.appendChild(summary);\n}\n"]}