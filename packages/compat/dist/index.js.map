{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAGA,IAAM,gBAAgB,oBAAI,IAAI;AAAA,EAC5B;AAAA,EAAW;AAAA,EAAW;AAAA,EAAW;AAAA,EAAa;AAAA,EAAc;AAAA,EAAe;AAAA,EAAgB;AAC7F,CAAC;AAKM,SAAS,WAAW,IAAsB;AAC/C,QAAM,WAA0B,CAAC;AACjC,QAAM,UAAW,GAAG,IAAI,SAAS,CAAC;AAClC,MAAI,WAAW;AACf,WAAS,IAAE,GAAE,IAAE,QAAQ,QAAO,KAAK;AACjC,UAAM,IAAI,QAAQ,CAAC;AACnB,QAAI,cAAc,IAAI,EAAE,IAAI,EAAG;AAAA,QAC1B,UAAS,KAAK,EAAE,OAAO,QAAQ,MAAM,aAAa,CAAC,IAAI,SAAS,SAAS,EAAE,IAAI,2BAA2B,CAAC;AAAA,EAClH;AACA,QAAM,QAAQ,QAAQ,UAAU;AAChC,QAAM,MAAM,KAAK,MAAO,WAAS,QAAO,GAAG;AAC3C,MAAI,GAAG,MAAM,YAAY;AACvB,eAAW,KAAK,SAAU,GAAE,QAAQ;AAAA,EACtC;AACA,SAAO,EAAE,UAAU,IAAI;AACzB","sourcesContent":["\nimport type { Json } from '@fir/ir';\n\nconst ALLOWED_KINDS = new Set([\n  'ui.frame','ui.table','ui.chart','ui.summary','policy.role','action.query','action.mutate','action.call_http'\n]);\n\nexport type LintMessage = { level: 'WARN'|'ERROR'; path: string; message: string };\nexport type LintResult = { messages: LintMessage[]; dci: number };\n\nexport function lintCompat(ir: Json): LintResult {\n  const messages: LintMessage[] = [];\n  const uiNodes = (ir.ui?.nodes ?? []) as any[];\n  let portable = 0;\n  for (let i=0;i<uiNodes.length;i++) {\n    const n = uiNodes[i];\n    if (ALLOWED_KINDS.has(n.kind)) portable++;\n    else messages.push({ level: 'WARN', path: `/ui/nodes/${i}`, message: `kind '${n.kind}' not in portable subset` });\n  }\n  const total = uiNodes.length || 1;\n  const dci = Math.round((portable/total)*100);\n  if (ir.meta?.strictMode) {\n    for (const m of messages) m.level = 'ERROR';\n  }\n  return { messages, dci };\n}\n"]}