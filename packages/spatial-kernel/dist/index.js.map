{"version":3,"sources":["../src/viewport.ts","../src/semantic.ts","../src/query.ts","../src/index.ts"],"names":["SemanticLevel"],"mappings":"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","sourcesContent":["/**\n * Viewport represents a view into infinite spatial canvas\n */\nexport class Viewport {\n  // Position in infinite space\n  public x: number = 0;\n  public y: number = 0;\n\n  // Scale (zoom level) - 1.0 = normal, <1 = zoomed out, >1 = zoomed in\n  public scale: number = 1;\n\n  // Viewport dimensions (pixels)\n  public width: number = 1920;\n  public height: number = 1080;\n\n  constructor(x: number = 0, y: number = 0, scale: number = 1) {\n    this.x = x;\n    this.y = y;\n    this.scale = scale;\n  }\n\n  /**\n   * Pan the viewport by delta x and y\n   */\n  pan(dx: number, dy: number): void {\n    this.x += dx;\n    this.y += dy;\n  }\n\n  /**\n   * Zoom the viewport by a factor\n   * factor > 1 = zoom in, factor < 1 = zoom out\n   */\n  zoom(factor: number): void {\n    this.scale *= factor;\n    // Clamp scale to reasonable bounds\n    this.scale = Math.max(0.001, Math.min(1000, this.scale));\n  }\n\n  /**\n   * Zoom to a specific scale\n   */\n  zoomTo(newScale: number): void {\n    this.scale = Math.max(0.001, Math.min(1000, newScale));\n  }\n\n  /**\n   * Reset viewport to origin\n   */\n  reset(): void {\n    this.x = 0;\n    this.y = 0;\n    this.scale = 1;\n  }\n\n  /**\n   * Get string representation for debugging\n   */\n  toString(): string {\n    return `Viewport(x:${this.x}, y:${this.y}, scale:${this.scale}x)`;\n  }\n}\n","/**\n * Semantic zoom levels - different meanings at different scales\n */\nexport enum SemanticLevel {\n  Quantum = \"quantum\", // 0.001x - 0.01x  (individual bits/bytes)\n  Atomic = \"atomic\", // 0.01x - 0.1x    (individual records)\n  Molecular = \"molecular\", // 0.1x - 0.5x     (relationships)\n  Standard = \"standard\", // 0.5x - 2x       (normal view)\n  System = \"system\", // 2x - 10x        (aggregates)\n  Universal = \"universal\", // 10x+            (summaries)\n}\n\n/**\n * Get semantic level based on zoom scale\n */\nexport function getSemanticLevel(scale: number): SemanticLevel {\n  if (scale < 0.01) return SemanticLevel.Quantum;\n  if (scale < 0.1) return SemanticLevel.Atomic;\n  if (scale < 0.5) return SemanticLevel.Molecular;\n  if (scale < 2) return SemanticLevel.Standard;\n  if (scale < 10) return SemanticLevel.System;\n  return SemanticLevel.Universal;\n}\n\n/**\n * Get human-readable description of semantic level\n */\nexport function getSemanticDescription(level: SemanticLevel): string {\n  switch (level) {\n    case SemanticLevel.Quantum:\n      return \"Bit-level detail - raw data\";\n    case SemanticLevel.Atomic:\n      return \"Record-level - individual items\";\n    case SemanticLevel.Molecular:\n      return \"Relationship-level - connections\";\n    case SemanticLevel.Standard:\n      return \"Standard view - normal detail\";\n    case SemanticLevel.System:\n      return \"System-level - aggregated data\";\n    case SemanticLevel.Universal:\n      return \"Universal view - high-level summary\";\n  }\n}\n\n/**\n * Get suggested data granularity for a semantic level\n */\nexport function getDataGranularity(level: SemanticLevel): {\n  rowLimit: number;\n  aggregation: string;\n} {\n  switch (level) {\n    case SemanticLevel.Quantum:\n      return { rowLimit: 1000, aggregation: \"none\" };\n    case SemanticLevel.Atomic:\n      return { rowLimit: 100, aggregation: \"none\" };\n    case SemanticLevel.Molecular:\n      return { rowLimit: 50, aggregation: \"minimal\" };\n    case SemanticLevel.Standard:\n      return { rowLimit: 25, aggregation: \"standard\" };\n    case SemanticLevel.System:\n      return { rowLimit: 10, aggregation: \"grouped\" };\n    case SemanticLevel.Universal:\n      return { rowLimit: 5, aggregation: \"summary\" };\n  }\n}\n","import { Viewport } from \"./viewport.js\";\nimport {\n  SemanticLevel,\n  getSemanticLevel,\n  getDataGranularity,\n} from \"./semantic.js\";\n\n/**\n * Generate SQL query based on viewport position and scale\n */\nexport function generateQuery(\n  viewport: Viewport,\n  tableName: string = \"data\"\n): string {\n  const level = getSemanticLevel(viewport.scale);\n  const granularity = getDataGranularity(level);\n\n  // Calculate spatial bounds for query\n  const bounds = getViewportBounds(viewport);\n\n  switch (level) {\n    case SemanticLevel.Quantum:\n      // Raw binary/hex data\n      return `SELECT id, raw_data, hex(bytes) \n              FROM ${tableName} \n              WHERE x BETWEEN ${bounds.minX} AND ${bounds.maxX}\n                AND y BETWEEN ${bounds.minY} AND ${bounds.maxY}\n              LIMIT ${granularity.rowLimit}`;\n\n    case SemanticLevel.Atomic:\n      // Individual records\n      return `SELECT * \n              FROM ${tableName}\n              WHERE x BETWEEN ${bounds.minX} AND ${bounds.maxX}\n                AND y BETWEEN ${bounds.minY} AND ${bounds.maxY}\n              LIMIT ${granularity.rowLimit}`;\n\n    case SemanticLevel.Molecular:\n      // Records with relationships\n      return `SELECT t1.*, COUNT(t2.id) as connections\n              FROM ${tableName} t1\n              LEFT JOIN ${tableName}_relations t2 ON t1.id = t2.source_id\n              WHERE t1.x BETWEEN ${bounds.minX} AND ${bounds.maxX}\n                AND t1.y BETWEEN ${bounds.minY} AND ${bounds.maxY}\n              GROUP BY t1.id\n              LIMIT ${granularity.rowLimit}`;\n\n    case SemanticLevel.Standard:\n      // Standard paginated view\n      return `SELECT id, name, category, value, created_at\n              FROM ${tableName}\n              WHERE x BETWEEN ${bounds.minX} AND ${bounds.maxX}\n                AND y BETWEEN ${bounds.minY} AND ${bounds.maxY}\n              ORDER BY created_at DESC\n              LIMIT ${granularity.rowLimit}`;\n\n    case SemanticLevel.System:\n      // Aggregated by category\n      return `SELECT category, \n                     COUNT(*) as count,\n                     AVG(value) as avg_value,\n                     SUM(value) as total_value\n              FROM ${tableName}\n              WHERE x BETWEEN ${bounds.minX} AND ${bounds.maxX}\n                AND y BETWEEN ${bounds.minY} AND ${bounds.maxY}\n              GROUP BY category\n              ORDER BY count DESC\n              LIMIT ${granularity.rowLimit}`;\n\n    case SemanticLevel.Universal:\n      // High-level summary\n      return `SELECT COUNT(*) as total_entities,\n                     COUNT(DISTINCT category) as categories,\n                     MIN(value) as min_value,\n                     MAX(value) as max_value,\n                     AVG(value) as avg_value\n              FROM ${tableName}\n              WHERE x BETWEEN ${bounds.minX} AND ${bounds.maxX}\n                AND y BETWEEN ${bounds.minY} AND ${bounds.maxY}`;\n  }\n}\n\n/**\n * Calculate viewport bounds in data space\n */\nfunction getViewportBounds(viewport: Viewport): {\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n} {\n  // Calculate visible area based on viewport position and scale\n  const visibleWidth = viewport.width / viewport.scale;\n  const visibleHeight = viewport.height / viewport.scale;\n\n  return {\n    minX: Math.floor(viewport.x - visibleWidth / 2),\n    maxX: Math.floor(viewport.x + visibleWidth / 2),\n    minY: Math.floor(viewport.y - visibleHeight / 2),\n    maxY: Math.floor(viewport.y + visibleHeight / 2),\n  };\n}\n\n/**\n * Generate API endpoint based on viewport\n */\nexport function generateEndpoint(viewport: Viewport): string {\n  const level = getSemanticLevel(viewport.scale);\n  const bounds = getViewportBounds(viewport);\n\n  const params = new URLSearchParams({\n    x: viewport.x.toString(),\n    y: viewport.y.toString(),\n    scale: viewport.scale.toString(),\n    level: level,\n    minX: bounds.minX.toString(),\n    maxX: bounds.maxX.toString(),\n    minY: bounds.minY.toString(),\n    maxY: bounds.maxY.toString(),\n  });\n\n  switch (level) {\n    case SemanticLevel.Quantum:\n    case SemanticLevel.Atomic:\n      return `/api/data/raw?${params}`;\n    case SemanticLevel.Molecular:\n      return `/api/data/relationships?${params}`;\n    case SemanticLevel.Standard:\n      return `/api/data/entities?${params}`;\n    case SemanticLevel.System:\n      return `/api/data/aggregates?${params}`;\n    case SemanticLevel.Universal:\n      return `/api/data/summary?${params}`;\n  }\n}\n","// Core viewport management\nexport { Viewport } from \"./viewport.js\";\n\n// Semantic zoom levels\nexport {\n  SemanticLevel,\n  getSemanticLevel,\n  getSemanticDescription,\n  getDataGranularity,\n} from \"./semantic.js\";\n\n// Query generation\nexport { generateQuery, generateEndpoint } from \"./query.js\";\n\n// Package version\nexport const version = \"0.1.0\";\n"]}