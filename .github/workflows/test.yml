name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint
      
    - name: Type check
      run: npm run typecheck
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true
        NODE_OPTIONS: '--max-old-space-size=4096'
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true
        NODE_OPTIONS: '--max-old-space-size=4096'
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # End-to-End Tests
  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build packages
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true
        NODE_OPTIONS: '--max-old-space-size=6144'
        # Add API keys for real integration tests (use secrets)
        FIGMA_API_TOKEN: ${{ secrets.FIGMA_API_TOKEN }}
        PENPOT_API_TOKEN: ${{ secrets.PENPOT_API_TOKEN }}
        OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
        
    - name: Archive test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          packages/*/test-results/
          packages/*/coverage/
        retention-days: 7

  # Performance Benchmarks
  benchmark:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: npm run test:bench
      env:
        CI: true
        NODE_OPTIONS: '--max-old-space-size=8192 --expose-gc'
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: packages/*/benchmark-results.json
        retention-days: 30
        
    - name: Performance regression check
      run: |
        # Compare with baseline performance metrics
        node scripts/check-performance-regression.js
      continue-on-error: true

  # Security and Quality Checks
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Check for known vulnerabilities
      run: npx better-npm-audit audit --level high
      
    - name: Dependency license check
      run: npx license-checker --summary
      
    - name: SAST with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Memory and Resource Tests
  memory:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Memory leak detection
      run: npm run test:memory
      env:
        CI: true
        NODE_OPTIONS: '--max-old-space-size=2048 --expose-gc'
        
    - name: Resource usage profiling
      run: npm run profile:resources
      
    - name: Upload profiling results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: memory-profiles
        path: profiles/
        retention-days: 7

  # Build Verification
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [development, production]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for ${{ matrix.target }}
      run: |
        if [ "${{ matrix.target }}" = "production" ]; then
          NODE_ENV=production npm run build
        else
          npm run build
        fi
        
    - name: Verify build output
      run: |
        # Check that all expected files are present
        test -d dist/
        test -f dist/index.js
        test -f dist/index.d.ts
        
    - name: Test built package
      run: |
        # Install built package locally and run smoke tests
        npm pack
        npm install -g ./fir-backend-generator-*.tgz
        node -e "require('fir-backend-generator')"

  # Documentation and API Tests  
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate API documentation
      run: npm run docs:generate
      
    - name: Validate documentation
      run: npm run docs:validate
      
    - name: Check for broken links
      run: npm run docs:check-links
      
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/generated/
        retention-days: 30

  # Compatibility Tests
  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run compatibility tests
      run: npm run test:compatibility
      env:
        CI: true
        
  # Notification and Reporting
  notify:
    runs-on: ubuntu-latest
    needs: [test, e2e, benchmark, security, memory, build, docs, compatibility]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.e2e.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.e2e.result == 'failure' }}
      run: |
        echo "❌ Tests failed. Check the logs for details."
        exit 1
        
    - name: Generate test report
      run: |
        echo "## Test Summary" >> test-summary.md
        echo "- Unit Tests: ${{ needs.test.result }}" >> test-summary.md
        echo "- E2E Tests: ${{ needs.e2e.result }}" >> test-summary.md  
        echo "- Benchmarks: ${{ needs.benchmark.result }}" >> test-summary.md
        echo "- Security: ${{ needs.security.result }}" >> test-summary.md
        echo "- Memory Tests: ${{ needs.memory.result }}" >> test-summary.md
        echo "- Build: ${{ needs.build.result }}" >> test-summary.md
        echo "- Docs: ${{ needs.docs.result }}" >> test-summary.md
        echo "- Compatibility: ${{ needs.compatibility.result }}" >> test-summary.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

# Cleanup job for old artifacts
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const cutoff = new Date();
          cutoff.setDate(cutoff.getDate() - 30); // Keep artifacts for 30 days
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < cutoff) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
          }